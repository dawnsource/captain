<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-3.2.xsd" default-autowire="no">

	<!-- 使Spring关注Annotation -->
    <context:annotation-config />
<!--     让Spring通过自动扫描来查询和管理Bean  -->
	<context:component-scan base-package="com.c306,com.captain"/>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:application.properties</value>
				<value>classpath:quartz.properties</value>
			</list>
		</property>
		<property name="placeholderPrefix" value="${" />
		<property name="placeholderSuffix" value="}" />
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${hibernate.connection.url}"/>
        <property name="username" value="${hibernate.connection.username}" />
        <property name="password" value="${hibernate.connection.password}" />
        <property name="maxActive" value="${hibernate.dbcp.maxActive}"/>
        <property name="maxIdle" value="${hibernate.dbcp.maxIdle}"/>
        <property name="maxWait" value="${hibernate.dbcp.maxWait}"/>
        <property name="removeAbandoned" value="${hibernate.dbcp.removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${hibernate.dbcp.removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${hibernate.dbcp.logAbandoned}" />
		<property name="validationQuery" value="${hibernate.dbcp.validationQuery}" />
		<property name="testOnBorrow" value="${hibernate.dbcp.testOnBorrow}" />
	</bean>
	
	<!--	<bean id="dataSource"-->
<!--        class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--        <property name="driverClassName" value="${hibernate.connection.driver_class}" />-->
<!--        <property name="url" value="${hibernate.connection.url}" />-->
<!--        <property name="username" value="${hibernate.connection.username}" />-->
<!--        <property name="password" value="${hibernate.connection.password}" />-->
<!--    </bean>-->
<!-- 		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		    <property name="jndiName"><value>jdbc/jpetstore</value></property> -->
<!-- 		</bean> -->
<!-- 		<bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager"/> -->
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.use_sql_comments">${hibernate.use_sql_comments}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
				<!-- <prop key="hibernate.connection.release_mode">after_transaction</prop> -->
				
                <prop key="hibernate.query.substitutions">true 'Y', false 'N'</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<!-- Hibernate Search index directory -->
                <prop key="hibernate.search.default.indexBase">${hibernate.search.default.indexBase}</prop>
                
				<!-- Turn batching off for better error messages under PostgreSQL -->
				<!-- <prop key="hibernate.jdbc.batch_size">0</prop> -->
			</props>
			
		</property>
		<property name="packagesToScan" value="com.c306,com.captain"/>
		<property name="mappingLocations">
			<list>
				<value>classpath:com/c306/**/*.hbm.xml</value>
			</list>
		</property>
		<property name="mappingJarLocations">
			<list>
				<value>WEB-INF/lib/captain-*.jar</value>
<!-- 				<value>../../../../core/target/captain-core-1.0-SNAPSHOT.jar</value> -->
			</list>
		</property>
		<property name="mappingDirectoryLocations">
			<list>
				<!-- 仅开发时配置
				<value>../../../../core/target/classes/com/c306</value> -->
			</list>
		</property>
		
	</bean>
	
	
	
	<!-- 配置事务管理 Begin -->
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="create*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="move*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="modif*" propagation="REQUIRED" rollback-for="java.lang.Exception" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" />
        </tx:attributes>
    </tx:advice>
    
    <aop:config proxy-target-class="true">
		<aop:pointcut id="pointcutService" expression="execution(* com.c306..service.*Service.*(..)) || execution(* com.c306..service.*Manager.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcutService"/>
	</aop:config>
    
	
    <!-- annotation transaction -->
<!-- 	<tx:annotation-driven transaction-manager="txManager" proxy-target-class="false" order="300" /> -->

</beans>